#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app') ;
var debug = require('debug')('login:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io').listen(server);
/**
 * Listen on provided port, on all network interfaces.
 */


io.on('connection', socket => {
  console.log('User connected')
 
  socket.emit("video play",1)


  socket.on('disconnect', () => {
    console.log('user disconnected')

  })



  const VideoCount = require("../model/VideoCount")
  const Video = require("../model/Video")
  var videoCek = Video.find()
  var countVideo = VideoCount.findOne({}); 

  socket.on("video start",(data)=>{
      videoCek.then((videoData)=>{
        var videoToplam = videoData.length;

        
        videoData.videoToplam = videoToplam -1; 
        return videoData
        
      }).then((data)=>{
            
            countVideo.then((sayx)=>{
              data.say = sayx.say
              

              return data
            }).then((data)=>{

               if(data.videoToplam == data.say || data.videoToplam < data.say){
                  VideoCount.update({},{$set:{say: 0 }},{ multi: true },(s,d)=>{
                    console.log("Video Değeri Sıfırlandı")
                  })
                  socket.emit("video onay",data[data.say])   
               }else{
                VideoCount.update({},{$set:{say: data.say +1 }},{ multi: true },(s,d)=>{
                  console.log("+1 Eklendi")
                }) 
                socket.emit("video onay",data[data.say]) 
                console.log(data)
               }

            })
       

      })


})





})





server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
